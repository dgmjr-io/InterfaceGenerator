using System.Linq;
using System.Reflection.Metadata;
/*
* DecomposerConstants.cs
*
*   Created: 2023-04-13-12:23:57
*   Modified: 2023-04-13-12:23:57
*
*   Author: David G. Moore, Jr. <david@io>
*
*   Copyright Â© 2022 - 2023 David G. Moore, Jr., All Rights Reserved
*      License: MIT (https://opensource.org/licenses/MIT)
*/

using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;

using Scriban;

namespace InterfaceGenerator.Decomposer
{
    internal static class Constants
    {
        public const string ThisAssemblyName = ThisAssembly.Project.AssemblyName;
        public const string ThisAssemblyVersion = ThisAssembly.Info.Version;
        public const string DecomposedInterfaceHeader = $$$"""
        //----------------------------------------------------------------------------------------
        // <auto-generated>
        //     This code was generated by {{{ThisAssemblyName}}}, version {{{ThisAssemblyVersion}}}
        //
        //     Changes to this file may cause incorrect behavior and will be lost if
        //     the code is regenerated.
        // </auto-generated>
        //----------------------------------------------------------------------------------------

        """;

        public static readonly AttributeListSyntax GeneratedCodeAttributesSyntax =
            SyntaxFactory.AttributeList(
                SyntaxFactory.SeparatedList(
                    SyntaxFactory
                        .ParseCompilationUnit(GeneratedCodeAttributes)
                        .DescendantNodesAndSelf(_ => true, false)
                        .SelectMany(node => node.ChildNodes())
                        .OfType<AttributeSyntax>()
                )
            );

        public const string GeneratedCodeAttributes = $$$"""
        [System.Runtime.CompilerServices.CompilerGenerated]
        [System.CodeDom.Compiler.GeneratedCode("{{{ThisAssemblyName}}}", "{{{ThisAssemblyVersion}}}")]
        """;

        public const string DecomposableAttributeName = "DecomposeAttribute";
        public const string DecomposableAttributeNamespace = nameof(Dgmjr);
        public const string DecomposableAttributeFullName =
            DecomposableAttributeNamespace + "." + DecomposableAttributeName;

        public const string IDecomposedInterfaceDeclaration =
            DecomposedInterfaceHeader
            + GeneratedCodeAttributes
            + "public interface IDecomposed<{{ name }}> { }";

        public const string DecomposedInterfaceDeclaration = $$$"""
        {{{DecomposedInterfaceHeader
    }
}}
        { { { GeneratedCodeAttributes} } }

{ { for member in members } }

namespace {{ member.namespace }}.{{{NamespaceSuffix }}}
        {
            public interface I {{ member.containing_type }}{ { member.name } }
{
    { { for declaration in member.declarations } }
    { { declaration } }
    { { end } }
}
        }

        { { end } }
""";

        public static readonly Scriban.Template DecomposedInterfaceDeclarationTemplate =
            Scriban.Template.Parse(DecomposedInterfaceDeclaration);

public const string DecomposableAttributeFilename = "DecomposableAttribute.g.cs";
public const string DecomposableAttributeResourceName = "DecomposeAttribute.cs";

public static readonly string DecomposableAttributeDeclaration =
    DecomposedInterfaceHeader
    + typeof(Constants).Assembly
        .GetManifestResourceStream(DecomposableAttributeResourceName)
        .ReadToEnd();

public static readonly SymbolDisplayFormat SymbolDisplayFormat =
    new(
        SymbolDisplayGlobalNamespaceStyle.Included,
        SymbolDisplayTypeQualificationStyle.NameAndContainingTypesAndNamespaces,
        SymbolDisplayGenericsOptions.IncludeTypeParameters
            | SymbolDisplayGenericsOptions.IncludeVariance
            | SymbolDisplayGenericsOptions.IncludeTypeConstraints,
        SymbolDisplayMemberOptions.IncludeConstantValue
            | SymbolDisplayMemberOptions.IncludeExplicitInterface
            | SymbolDisplayMemberOptions.IncludeModifiers
            | SymbolDisplayMemberOptions.IncludeParameters
            | SymbolDisplayMemberOptions.IncludeRef
            | SymbolDisplayMemberOptions.IncludeType,
        SymbolDisplayDelegateStyle.NameAndSignature,
        SymbolDisplayExtensionMethodStyle.Default,
        SymbolDisplayParameterOptions.IncludeExtensionThis
            | SymbolDisplayParameterOptions.IncludeName
            | SymbolDisplayParameterOptions.IncludeParamsRefOut
            | SymbolDisplayParameterOptions.IncludeType
            | SymbolDisplayParameterOptions.IncludeDefaultValue
            | SymbolDisplayParameterOptions.IncludeOptionalBrackets,
        SymbolDisplayPropertyStyle.ShowReadWriteDescriptor,
        miscellaneousOptions: SymbolDisplayMiscellaneousOptions.UseSpecialTypes
            | SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers
            | SymbolDisplayMiscellaneousOptions.UseAsterisksInMultiDimensionalArrays
            | SymbolDisplayMiscellaneousOptions.UseErrorTypeSymbolName
            | SymbolDisplayMiscellaneousOptions.IncludeNullableReferenceTypeModifier
            | SymbolDisplayMiscellaneousOptions.IncludeNotNullableReferenceTypeModifier
    );

internal const string AttributeName = "Decompose";
internal const string AttributeFullName = AttributeName + nameof(Attribute);
internal const string AttributeFulllyQualifiedName =
    DecomposableAttributeNamespace + "." + AttributeName + nameof(Attribute);
internal const string InterfaceNamePrefix = "I";
internal const string InterfaceSuffix = "Decomposition";
internal const string NamespaceSuffix = ".Decompositions";
internal const string SourceFileNameSuffix = ".Decompositions.g.cs";
internal const string GeneratedCodeAttributeName = "GeneratedCodeAttribute";
internal const string GeneratedCodeAttributeFullName =
    $"System.Diagnostics.CodeAnalysis.{GeneratedCodeAttributeName}";
internal const string CompilerGeneratedAttributeFullName =
    "System.Runtime.CompilerServices.CompilerGeneratedAttribute";
    }
}

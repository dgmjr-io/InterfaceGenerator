//
// Constants.cs
//
//   Created: 2022-11-11-04:00:23
//   Modified: 2022-11-12-11:24:45
//
//   Author: David G. Moore, Jr. <david@dgmjr.io>
//
//   Copyright Â© 2022-2023 David G. Moore, Jr., All Rights Reserved
//      License: MIT (https://opensource.org/licenses/MIT)
//


namespace Dgmjr.InterfaceGenerator;

using Microsoft.CodeAnalysis;

public static class Constants
{
    public const string AssemblyName = ThisAssembly.Project.AssemblyName;
    public const string AssemblyVersion = ThisAssembly.Info.Version;
    public const string GenerateInterfaceAttribute = nameof(GenerateInterfaceAttribute);
    public const string AttributeClass = GenerateInterfaceAttribute;
    public const string _cs = ".cs";
    public const string _g = ".g";
    public const string Header = $"""
        //----------------------------------------------------------------------------------------
        // <auto-generated>
        //     This code was generated by {AssemblyName} version {AssemblyVersion}
        //
        //     Changes to this file may cause incorrect behavior and will be lost if
        //     the code is regenerated.
        // </auto-generated>
        //----------------------------------------------------------------------------------------
        using System;
        #nullable enable

        """;

    public const string GenerateInterfaceAttributeDeclaration = $$$"""
        {{{Header}}}

        [AttributeUsage(AttributeTargets.Interface | AttributeTargets.Class | AttributeTargets.Struct)]
        public sealed class {{{GenerateInterfaceAttribute}}}(Type? @type = default, string? interfaceName, string? @namespace) : Attribute
        {
            public type Type { get; } = @type;
            public string InterfaceName { get; } = interfaceName;
            public string Namespace { get; } = @namespace;
        }
        """;

    public const string InterfaceDeclaration =
        Header
        + """

        #nullable enable
        using System;
        using System.Collections.Generic;
        using System.Linq;
        using System.Reflection;
        using System.Runtime.CompilerServices;
        using System.Threading.Tasks;

        namespace {{ namespace }}
        {
            public partial interface {{ interface_name }}
            {
                {{ members }}
            }
        }
        """;

    public static readonly Scriban.Template InterfaceDeclarationTemplate = Scriban.Template.Parse(
        InterfaceDeclaration
    );

    public const string MethodDeclaration = "{{ full_definition }};";

    public static readonly Scriban.Template MethodDeclarationTemplate = Scriban.Template.Parse(
        MethodDeclaration
    );

    public const string MethodParameter = """
    {{ type }} {{ name }}
    """;

    public static readonly Scriban.Template MethodParameterTemplate = Scriban.Template.Parse(
        MethodParameter
    );

    public const string PropertyDeclaration =
        "{{ type }} {{ if is_indexed }}this[ {{ indexers }}] {{ else }} {{ name }} {{ end }} { {{ if is_gettable }} get; {{ end }} {{ if is_settable }} set; {{ end }} }";

    public static readonly Scriban.Template PropertyDeclarationTemplate = Scriban.Template.Parse(
        PropertyDeclaration
    );

    public static readonly SymbolDisplayFormat SymbolDisplayFormat =
        new(
            genericsOptions: SymbolDisplayGenericsOptions.IncludeTypeParameters,
            memberOptions: SymbolDisplayMemberOptions.IncludeParameters,
            parameterOptions: SymbolDisplayParameterOptions.None
        );
    // new(
    //     globalNamespaceStyle: SymbolDisplayGlobalNamespaceStyle.Included,
    //     typeQualificationStyle: SymbolDisplayTypeQualificationStyle.NameAndContainingTypesAndNamespaces,
    //     genericsOptions: SymbolDisplayGenericsOptions.IncludeTypeParameters
    //         | SymbolDisplayGenericsOptions.IncludeTypeConstraints,
    //     memberOptions: SymbolDisplayMemberOptions.IncludeParameters
    //         | SymbolDisplayMemberOptions.IncludeType
    //         | SymbolDisplayMemberOptions.IncludeModifiers
    //         | SymbolDisplayMemberOptions.IncludeConstantValue,
    //     delegateStyle: SymbolDisplayDelegateStyle.NameAndSignature,
    //     extensionMethodStyle: SymbolDisplayExtensionMethodStyle.Default,
    //     parameterOptions: SymbolDisplayParameterOptions.IncludeType
    //         | SymbolDisplayParameterOptions.IncludeName
    //         | SymbolDisplayParameterOptions.IncludeDefaultValue,
    //     propertyStyle: SymbolDisplayPropertyStyle.ShowReadWriteDescriptor,
    //     kindOptions: SymbolDisplayKindOptions.None,
    //     miscellaneousOptions: SymbolDisplayMiscellaneousOptions.UseSpecialTypes
    //         | SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers
    //         | SymbolDisplayMiscellaneousOptions.AllowDefaultLiteral
    // );

    // new(
    //     SymbolDisplayGlobalNamespaceStyle.Included,
    //     SymbolDisplayTypeQualificationStyle.NameAndContainingTypesAndNamespaces,
    //     SymbolDisplayGenericsOptions.IncludeTypeParameters
    //         | SymbolDisplayGenericsOptions.IncludeVariance
    //         | SymbolDisplayGenericsOptions.IncludeTypeConstraints,
    //     SymbolDisplayMemberOptions.IncludeExplicitInterface
    //         | SymbolDisplayMemberOptions.IncludeModifiers
    //         | SymbolDisplayMemberOptions.IncludeParameters
    //         | SymbolDisplayMemberOptions.IncludeRef
    //         | SymbolDisplayMemberOptions.IncludeType
    //         // | SymbolDisplayMemberOptions.IncludeContainingType
    //         | SymbolDisplayMemberOptions.IncludeAccessibility,
    //     SymbolDisplayDelegateStyle.NameAndSignature,
    //     SymbolDisplayExtensionMethodStyle.Default,
    //     SymbolDisplayParameterOptions.IncludeExtensionThis
    //         | SymbolDisplayParameterOptions.IncludeName
    //         | SymbolDisplayParameterOptions.IncludeParamsRefOut
    //         | SymbolDisplayParameterOptions.IncludeType
    //         | SymbolDisplayParameterOptions.IncludeDefaultValue,
    //     SymbolDisplayPropertyStyle.ShowReadWriteDescriptor,
    //     SymbolDisplayLocalOptions.None,
    //     SymbolDisplayKindOptions.None,
    //     miscellaneousOptions: SymbolDisplayMiscellaneousOptions.UseSpecialTypes
    //         | SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers
    //         | SymbolDisplayMiscellaneousOptions.UseAsterisksInMultiDimensionalArrays
    //         | SymbolDisplayMiscellaneousOptions.UseErrorTypeSymbolName
    //         | SymbolDisplayMiscellaneousOptions.IncludeNullableReferenceTypeModifier
    //         | SymbolDisplayMiscellaneousOptions.IncludeNotNullableReferenceTypeModifier
    // );
}

public record struct InterfaceGeneratorModel(
    string Namespace,
    string InterfaceName,
    string Members,
    string TypeParameters,
    string TypeConstraints
);

public static class Environment
{
    public const string NewLine = "\r\n";
}
